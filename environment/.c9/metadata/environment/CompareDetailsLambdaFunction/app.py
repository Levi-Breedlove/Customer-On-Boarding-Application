{"changed":true,"filter":false,"title":"app.py","tooltip":"/CompareDetailsLambdaFunction/app.py","value":"\"Compare the details extracted from the license and the CSV file\"\nimport csv\nimport os\nimport boto3\nfrom aws_lambda_powertools import Tracer \n\nenv_table = os.environ['TABLE']\nenv_topic = os.environ['TOPIC']\ntracer = Tracer() \n\ns3 = boto3.client('s3')\nunzipped_s3_prefix = \"unzipped/\"\ndynamodb = boto3.resource('dynamodb')\nddb_table = dynamodb.Table(env_table)\ntextract = boto3.client('textract')\nsns = boto3.client('sns')\n\n\ndef textract_response(bucket, license_key):\n    \"Send license to textract\"\n\n    # Pass the license image to textract to extract information\n    print(\"Starting license analysis\")\n    response = textract.analyze_id(\n        DocumentPages=[{\n                'S3Object': {\n                'Bucket': bucket,\n                'Name': license_key\n            }\n        }]\n    )\n\n    id_document = response['IdentityDocuments'][0]\n    id_data = id_document['IdentityDocumentFields']\n    id_fields = {}\n\n    # Build dictionary of the CSV fields and textract values\n    csv_fields = ['DOCUMENT_NUMBER','FIRST_NAME','LAST_NAME','DATE_OF_BIRTH',\n                    'ADDRESS','STATE_IN_ADDRESS','CITY_IN_ADDRESS','ZIP_CODE_IN_ADDRESS']\n    id_fields = { field['Type']['Text']: field['ValueDetection']['Text'] for field in id_data\n                 if field['Type']['Text'] in csv_fields }\n    print(\"finished textract\")\n    return id_fields\n\n\ndef compare_dictionaries(app_uuid, details_dict, textract_dict):\n    \"Compare license and csv\"\n    print(\"Comparing license and csv\")\n\n    comparison = details_dict == textract_dict\n\n    # Update DDB with license data match value, SNS publish\n    ddb_table.update_item(\n        Key={\n            'APP_UUID': app_uuid\n            },\n        UpdateExpression='SET LICENSE_DETAILS_MATCH = :d_match',\n        ExpressionAttributeValues={\n            ':d_match': comparison\n            }\n        )\n\n    if not comparison:\n        sns.publish(\n            TopicArn= env_topic,\n            Message= 'Data validation between license and CSV FAILED',\n            Subject='Data validation between license and CSV FAILED',\n            )\n        raise ValueError('Data comparison between App and license FAILED. Program will stop')\n\n    return comparison\n    \n@tracer.capture_lambda_handler   \ndef lambda_handler(event, context):\n    \"Download the CSV, send the license to textract and compare\"\n    bucket = event['detail']['bucket']['name']\n    app_uuid = event[\"application\"][\"app_uuid\"]\n    details_key = f\"{unzipped_s3_prefix}{app_uuid}_details.csv\"\n    details_file = f\"/tmp/{app_uuid}_details.csv\"\n    license_key = f\"{unzipped_s3_prefix}{app_uuid}_license.png\"\n\n    s3.download_file(bucket, details_key, details_file)\n\n    with open(details_file, 'r', encoding=\"utf-8\") as file:\n        reader = csv.DictReader(file)\n        details_dict = next(reader)\n\n    # Submit license to Textract to extract fields\n    textract_dict = textract_response(bucket, license_key)\n\n    # Compare the Textract fields with the CSV file\n    compare_dictionaries(app_uuid, details_dict, textract_dict)\n\n    return True","undoManager":{"mark":4,"position":5,"stack":[[{"start":{"row":3,"column":12},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":41},"action":"insert","lines":["from aws_lambda_powertools import Tracer "],"id":3}],[{"start":{"row":7,"column":31},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":18},"action":"insert","lines":["tracer = Tracer() "],"id":5}],[{"start":{"row":71,"column":0},"end":{"row":71,"column":33},"action":"insert","lines":["@tracer.capture_lambda_handler   "],"id":6}],[{"start":{"row":70,"column":21},"end":{"row":71,"column":0},"action":"insert","lines":["",""],"id":7},{"start":{"row":71,"column":0},"end":{"row":71,"column":4},"action":"insert","lines":["    "]}]]},"ace":{"folds":[],"scrolltop":600,"scrollleft":0,"selection":{"start":{"row":71,"column":4},"end":{"row":71,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1750447777720}